<?php

namespace App;

use Illuminate\Database\Eloquent\Builder;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Illuminate\Support\Facades\DB;

/**
 * Class User
 * @package App
 *
 * @property integer id
 * @property string name
 * @property string email
 * @property string password
 * @property string remember_token
 * @property string email_verified_at
 * @property string created_at
 * @property integer updated_at
 *
 */
class User extends Authenticatable
{
    use Notifiable;

    protected $perPage = 30;

    const
        STATUS_ACTIVATE = 1,
        STATUS_DEACTIVATE = 0;
    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'name', 'email', 'password', 'status'
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    /**
     * The attributes that should be cast to native types.
     *
     * @var array
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
        'status' => 'boolean',
    ];

    /**
     * boot
     */
    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::creating(function (User $model) {
            $model->password = bcrypt(($model->password));
        });
    }

    /**
     * $this->activate()
     *
     * @param Builder $builder
     * @return mixed
     */
    public function scopeActivate(Builder $builder): Builder
    {
        return $builder->whereStatus(User::STATUS_ACTIVATE);
    }

    /**
     * $this->isGmail()
     *
     * @param Builder $builder
     * @return Builder
     */
    public function scopeIsGmail(Builder $builder): Builder
    {
        return $builder->where('email', 'REGEXP', 'gmail.com$');
    }

    /**
     * @param Builder $builder
     * @return Builder
     */
    public function scopeIsGmailOrYahoo(Builder $builder): Builder
    {
        return $builder->where(function ($query) {
            return $query->where('email', 'REGEXP', 'gmail.com$')
                ->orWhere('email', 'REGEXP', 'yahoo.com$');
        });
    }

    /**
     * @param Builder $builder
     * @param null $params
     * @return Builder
     */
    public function scopeMailIn(Builder $builder, $params = null)
    {

        if (is_string($params)) {
            return $builder->where('email', 'REGEXP', $params . '$');
        }

        if (is_array($params)) {
            return $builder->where(function ($query) use ($params) {
                foreach ($params as $param):
                    $query->orWhere('email', 'REGEXP', $param . '$');
                endforeach;
                return $query;
            });
        }

        return $builder;
    }
}
